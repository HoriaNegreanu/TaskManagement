@model TaskManagement.Models.EmployeesViewModel

@{
    ViewData["Title"] = @ViewBag.EmployeeName + " Details";
}
@if (ViewBag.Message != null)
{
    <div class="alert alert-success alert-dismissible" style="margin-top:20px">
        @ViewBag.Message
    </div>
}
<h1 class="mb-5">Activity for Employee @ViewBag.EmployeeName</h1>
<div class="row">
    <div class="col-sm-6 col-md-3 mb-3">
        <div class="employee-statistics">
            <div>Worked Hours</div><div>@ViewBag.TotalWorkHoursMonth</div>
        </div>
    </div>
    <div class="col-sm-6 col-md-3 mb-3">
        <div class="employee-statistics">
            <div>Assigned Tasks</div><div>@ViewBag.AssignedTasks</div>
        </div>
    </div>
    <div class="col-sm-6 col-md-3 mb-3">
        <div class="employee-statistics">
            <div>Active Tasks</div><div>@ViewBag.ActiveTasks</div>
        </div>
    </div>
    <div class="col-sm-6 col-md-3 mb-3">
        <div class="employee-statistics">
            <div>Tasks In Review</div><div>@ViewBag.InReviewTasks</div>
        </div>
    </div>
</div>
<div class="bar-chart">
    <div class="col-md-12">
        <form asp-action="GetTasksForMonth" asp-controller="Employees">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="UserId" value="@Model.UserId" />
            Year <input class="form-control-inline" asp-for="Year" class="form-control" />
            Month <select asp-for="Month" class="form-control-inline">
                <option value="1">January</option>
                <option value="2">February</option>
                <option value="3">March</option>
                <option value="4">April</option>
                <option value="5">May</option>
                <option value="6">June</option>
                <option value="7">July</option>
                <option value="8">August</option>
                <option value="9">September</option>
                <option value="10">October</option>
                <option value="11">November</option>
                <option value="12">December</option>
            </select>
            <input type="submit" value="Display Graph" class="btn btn-purple" />
        </form>
        <div>
            <canvas id="hoursBarChart" width="400" height="200"></canvas>
        </div>
    </div>
</div>
<form class="mb-3">
    <input type="hidden" name="FullName" value="@Model.FullName" />
    <input type="submit" class="btn btn-purple" asp-controller="Employees" asp-action="ViewAllTaskForEmployee" value="View All Tasks for Employee"></input>
</form>
@if (Model.EmployeeHoursDistinct.Count() > 0)
{
    
    @if (@ViewBag.TotalWorkHoursMonth != null && @ViewBag.TotalWorkHoursMonth != 0)
    {
        <h4>Total hours worked: @ViewBag.TotalWorkHoursMonth</h4>
    }
    <h3>All tasks from selected period</h3>
    <div>
        <table class="table">
            <thead>
                <tr>
                    <th>@Html.DisplayNameFor(model => model.EmployeeHoursDistinct[0].TaskItem.Title)</th>
                    <th>@Html.DisplayNameFor(model => model.EmployeeHoursDistinct[0].TaskItem.ProjectID)</th>
                    <th>@Html.DisplayNameFor(model => model.EmployeeHoursDistinct[0].TaskItem.CreatedBy)</th>
                    <th>@Html.DisplayNameFor(model => model.EmployeeHoursDistinct[0].TaskItem.CreatedDate)</th>
                    <th>@Html.DisplayNameFor(model => model.EmployeeHoursDistinct[0].TaskItem.WorkedHours)</th>
                    <th>@Html.DisplayNameFor(model => model.EmployeeHoursDistinct[0].TaskItem.Priority)</th>
                    <th>@Html.DisplayNameFor(model => model.EmployeeHoursDistinct[0].TaskItem.Status)</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.Tasks != null)
                {
                    @foreach (var employeeHour in Model.EmployeeHoursDistinct)
                    {
                        <tr>
                            <td>@Html.DisplayFor(modelItem => employeeHour.TaskItem.Title)</td>
                            <td>@Html.DisplayFor(modelItem => employeeHour.TaskItem.Project.Title)</td>
                            <td>@Html.DisplayFor(modelItem => employeeHour.TaskItem.CreatedBy)</td>
                            <td>@Html.DisplayFor(modelItem => employeeHour.TaskItem.CreatedDate)</td>
                            <td>@Html.DisplayFor(modelItem => employeeHour.TaskItem.WorkedHours)</td>
                            <td>@Html.DisplayFor(modelItem => employeeHour.TaskItem.Priority)</td>
                            <td>@Html.DisplayFor(modelItem => employeeHour.TaskItem.Status)</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
}
else
{
    <h3>No activity found for selected period</h3>
}

@section scripts{
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script type="text/javascript">

    //get arrays of labels and values
    var model = '@Html.Raw(Json.Serialize(Model.EmployeeHours))';
    var activities = JSON.parse(model);
    if(activities === null)
        activities = [];
    var labels = activities.map(function(activity) {return activity.completedDate.substring(0, activity.completedDate.indexOf('T'))});
    var values = activities.map(function(activity) {return activity.workedHours});

    var chartData = [];
    for(const i in labels){
        var object = {label:labels[i].substring(labels[i].lastIndexOf('-') + 1), value:values[i]};
        chartData.push(object);
    }
    //console.log(chartData);

    //remove duplicate dates and sum the hours
    var chartDataUnique = [];

    var dt = new Date();
    var month = parseInt('@Html.Raw(Json.Serialize(Model.Month))');
    var year = dt.getFullYear();
    daysInMonth = new Date(year, month, 0).getDate();
    for(var i=1;i<=daysInMonth;i++){
        var object = {label:String(i), value:0}
        chartDataUnique.push(object);
    }

    chartData.forEach(element => {
        var exists = chartDataUnique.find(item => item.label === element.label);
        if(!exists){
            chartDataUnique.push({...element});
        }
        else{
            exists.value += element.value;
        }
    });
    chartDataUnique.forEach(element => {
        element.label = parseInt(element.label);
    });
    //console.log(chartDataUnique);

    //sort chartDataUnique by date
    chartDataUnique.sort((a,b) => a.label - b.label);

    //create labels and values for bar chart
    labels = [];
    values = [];
    chartDataUnique.forEach(element => {
        labels.push(element.label);
        values.push(element.value);
    });


    //create bar chart
    $(document).ready(function () {

        $(function () {
            var ctx = document.getElementById("hoursBarChart");
            var myBarChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: "Hours worked",
                        backgroundColor: "rgba(62, 19, 171, 0.2)",
                        borderColor: "rgba(62, 19, 171, 0.8)",
                        borderWidth: 2,
                        hoverBackgroundColor: "rgba(62, 19, 171, 0.4)",
                        hoverBorderColor: "rgba(62, 19, 171, 0.8)",
                        data: values
                    }]
                },
                options: {
                    scales: {
                        xAxes: {
                            title: {
                                display: true,
                                text: 'Day'
                            }
                        },
                        yAxes: {
                            ticks: {
                                stepSize: 1
                            }
                        }
                    }
                }
            });
        });
    });
</script>
}